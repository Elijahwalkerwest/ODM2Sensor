# -*- coding: utf-8 -*-
# Generated by Django 1.9.5 on 2018-01-29 13:03
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Action',
            fields=[
                ('actionid', models.AutoField(db_column='actionid', primary_key=True, serialize=False)),
                ('begindatetime', models.DateTimeField(db_column='begindatetime')),
                ('begindatetimeutcoffset', models.IntegerField(db_column='begindatetimeutcoffset')),
                ('enddatetime', models.DateTimeField(blank=True, db_column='enddatetime', null=True)),
                ('enddatetimeutcoffset', models.IntegerField(blank=True, db_column='enddatetimeutcoffset', null=True)),
                ('actiondescription', models.TextField(blank=True, db_column='actiondescription')),
                ('actionfilelink', models.FileField(blank=True, db_column='actionfilelink', upload_to='actionfilelinks/%Y/%m/%d')),
            ],
            options={
                'db_table': 'actions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ActionAnnotation',
            fields=[
                ('bridgeid', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'actionannotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ActionBy',
            fields=[
                ('bridgeid', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('isactionlead', models.BooleanField(db_column='isactionlead', default=None)),
                ('roledescription', models.TextField(blank=True, db_column='roledescription')),
            ],
            options={
                'db_table': 'actionby',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ActionDirective',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'actiondirectives',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ActionExtensionPropertyValue',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('propertyvalue', models.TextField(db_column='propertyvalue')),
            ],
            options={
                'db_table': 'actionextensionpropertyvalues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Affiliation',
            fields=[
                ('affiliationid', models.AutoField(db_column='affiliationid', primary_key=True, serialize=False)),
                ('isprimaryorganizationcontact', models.NullBooleanField(db_column='isprimaryorganizationcontact', default=None)),
                ('affiliationstartdate', models.DateField(db_column='affiliationstartdate')),
                ('affiliationenddate', models.DateField(blank=True, db_column='affiliationenddate', null=True)),
                ('primaryphone', models.TextField(blank=True, db_column='primaryphone')),
                ('primaryemail', models.TextField(db_column='primaryemail')),
                ('primaryaddress', models.TextField(blank=True, db_column='primaryaddress')),
                ('personlink', models.TextField(blank=True, db_column='personlink')),
            ],
            options={
                'db_table': 'affiliations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('annotationid', models.AutoField(db_column='annotationid', primary_key=True, serialize=False)),
                ('annotationcode', models.TextField(blank=True, db_column='annotationcode')),
                ('annotationtext', models.TextField(db_column='annotationtext')),
                ('annotationdatetime', models.DateTimeField(blank=True, db_column='annotationdatetime', null=True)),
                ('annotationutcoffset', models.IntegerField(blank=True, db_column='annotationutcoffset', null=True)),
                ('annotationlink', models.TextField(blank=True, db_column='annotationlink')),
            ],
            options={
                'db_table': 'annotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthorList',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('authororder', models.IntegerField(db_column='authororder')),
            ],
            options={
                'db_table': 'authorlists',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CalibrationReferenceEquipment',
            fields=[
                ('bridgeid', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'calibrationreferenceequipment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CalibrationStandard',
            fields=[
                ('bridgeid', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'calibrationstandards',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CategoricalResultValue',
            fields=[
                ('valueid', models.BigIntegerField(db_column='valueid', primary_key=True, serialize=False)),
                ('datavalue', models.TextField(db_column='datavalue')),
                ('valuedatetime', models.DateTimeField(db_column='valuedatetime')),
                ('valuedatetimeutcoffset', models.IntegerField(db_column='valuedatetimeutcoffset')),
            ],
            options={
                'db_table': 'categoricalresultvalues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CategoricalResultValueAnnotation',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'categoricalresultvalueannotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Citation',
            fields=[
                ('citationid', models.IntegerField(db_column='citationid', primary_key=True, serialize=False)),
                ('title', models.TextField(db_column='title')),
                ('publisher', models.TextField(db_column='publisher')),
                ('publicationyear', models.IntegerField(db_column='publicationyear')),
                ('citationlink', models.TextField(blank=True, db_column='citationlink')),
            ],
            options={
                'db_table': 'citations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CitationExtensionPropertyValue',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('propertyvalue', models.TextField(db_column='propertyvalue')),
            ],
            options={
                'db_table': 'citationextensionpropertyvalues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CitationExternalIdentifier',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('citationexternalidentifer', models.TextField(db_column='citationexternalidentifer')),
                ('citationexternalidentiferuri', models.TextField(blank=True, db_column='citationexternalidentiferuri')),
            ],
            options={
                'db_table': 'citationexternalidentifiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvActiontype',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_actiontype',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvAggregationstatistic',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_aggregationstatistic',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvAnnotationtype',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_annotationtype',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvCensorcode',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_censorcode',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvDataqualitytype',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_dataqualitytype',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvDatasettype',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_datasettype',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvDirectivetype',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_directivetype',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvElevationdatum',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_elevationdatum',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvEquipmenttype',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_equipmenttype',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvMedium',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_medium',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvMethodtype',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_methodtype',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvOrganizationtype',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_organizationtype',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvPropertydatatype',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_propertydatatype',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvQualitycode',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_qualitycode',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvRelationshiptype',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_relationshiptype',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvResulttype',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_resulttype',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvSamplingfeaturegeotype',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_samplingfeaturegeotype',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvSamplingfeaturetype',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_samplingfeaturetype',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvSitetype',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_sitetype',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvSpatialoffsettype',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_spatialoffsettype',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvSpeciation',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_speciation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvSpecimentype',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_specimentype',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvStatus',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_status',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvTaxonomicclassifiertype',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_taxonomicclassifiertype',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvTerm',
            fields=[
                ('termid', models.IntegerField(db_column='termid', primary_key=True, serialize=False)),
                ('term', models.TextField(db_column='term')),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('odmvocabulary', models.TextField(db_column='odmvocabulary')),
                ('sourcevocabulary', models.TextField(blank=True, db_column='sourcevocabulary')),
            ],
            options={
                'db_table': 'cvterms',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvUnitstype',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_unitstype',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvVariablename',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_variablename',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CvVariabletype',
            fields=[
                ('term', models.TextField(db_column='term')),
                ('name', models.TextField(db_column='name', primary_key=True, serialize=False)),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('category', models.TextField(blank=True, db_column='category')),
                ('sourcevocabularyuri', models.TextField(blank=True, db_column='sourcevocabularyuri')),
            ],
            options={
                'db_table': 'cv_variabletype',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataloggerFile',
            fields=[
                ('dataloggerfileid', models.AutoField(db_column='dataloggerfileid', primary_key=True, serialize=False)),
                ('dataloggerfilename', models.TextField(db_column='dataloggerfilename')),
                ('dataloggerfiledescription', models.TextField(blank=True, db_column='dataloggerfiledescription')),
                ('dataloggerfilelink', models.TextField(blank=True, db_column='dataloggerfilelink')),
            ],
            options={
                'db_table': 'dataloggerfiles',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataloggerFileColumn',
            fields=[
                ('dataloggerfilecolumnid', models.AutoField(db_column='dataloggerfilecolumnid', primary_key=True, serialize=False)),
                ('columnlabel', models.TextField(db_column='columnlabel')),
                ('columndescription', models.TextField(blank=True, db_column='columndescription')),
                ('measurementequation', models.TextField(blank=True, db_column='measurementequation')),
                ('scaninterval', models.FloatField(blank=True, db_column='scaninterval', null=True)),
                ('recordinginterval', models.FloatField(blank=True, db_column='recordinginterval', null=True)),
            ],
            options={
                'db_table': 'dataloggerfilecolumns',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataloggerProgramFile',
            fields=[
                ('programid', models.AutoField(db_column='programid', primary_key=True, serialize=False)),
                ('programname', models.TextField(db_column='programname')),
                ('programdescription', models.TextField(blank=True, db_column='programdescription')),
                ('programversion', models.TextField(blank=True, db_column='programversion')),
                ('programfilelink', models.TextField(blank=True, db_column='programfilelink')),
            ],
            options={
                'db_table': 'dataloggerprogramfiles',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DataQuality',
            fields=[
                ('dataqualityid', models.IntegerField(db_column='dataqualityid', primary_key=True, serialize=False)),
                ('dataqualitycode', models.TextField(db_column='dataqualitycode')),
                ('dataqualityvalue', models.FloatField(blank=True, db_column='dataqualityvalue', null=True)),
                ('dataqualitydescription', models.TextField(blank=True, db_column='dataqualitydescription')),
                ('dataqualitylink', models.TextField(blank=True, db_column='dataqualitylink')),
            ],
            options={
                'db_table': 'dataquality',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('datasetid', models.IntegerField(db_column='datasetid', primary_key=True, serialize=False)),
                ('datasetuuid', models.TextField(db_column='datasetuuid')),
                ('datasetcode', models.TextField(db_column='datasetcode')),
                ('datasettitle', models.TextField(db_column='datasettitle')),
                ('datasetabstract', models.TextField(db_column='datasetabstract')),
            ],
            options={
                'db_table': 'datasets',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DatasetCitation',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'datasetcitations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DatasetsResult',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'datasetsresults',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DerivationEquation',
            fields=[
                ('derivationequationid', models.IntegerField(db_column='derivationequationid', primary_key=True, serialize=False)),
                ('derivationequation', models.TextField(db_column='derivationequation')),
            ],
            options={
                'db_table': 'derivationequations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Directive',
            fields=[
                ('directiveid', models.IntegerField(db_column='directiveid', primary_key=True, serialize=False)),
                ('directivedescription', models.TextField(db_column='directivedescription')),
            ],
            options={
                'db_table': 'directives',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('equipmentid', models.AutoField(db_column='equipmentid', primary_key=True, serialize=False)),
                ('equipmentcode', models.TextField(db_column='equipmentcode')),
                ('equipmentname', models.TextField(db_column='equipmentname')),
                ('equipmentserialnumber', models.TextField(db_column='equipmentserialnumber')),
                ('equipmentpurchasedate', models.DateTimeField(db_column='equipmentpurchasedate')),
                ('equipmentpurchaseordernumber', models.TextField(blank=True, db_column='equipmentpurchaseordernumber')),
                ('equipmentdescription', models.TextField(blank=True, db_column='equipmentdescription')),
                ('equipmentdocumentationlink', models.FileField(blank=True, db_column='equipmentdocumentationlink', upload_to='equipmentdocumentation')),
            ],
            options={
                'db_table': 'equipment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EquipmentAnnotation',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'equipmentannotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EquipmentModel',
            fields=[
                ('equipmentmodelid', models.AutoField(db_column='equipmentmodelid', primary_key=True, serialize=False)),
                ('modelpartnumber', models.TextField(blank=True, db_column='modelpartnumber')),
                ('modelname', models.TextField(db_column='modelname')),
                ('modeldescription', models.TextField(blank=True, db_column='modeldescription')),
                ('isinstrument', models.BooleanField(db_column='isinstrument', default=None)),
                ('modelspecificationsfilelink', models.FileField(blank=True, db_column='modelspecificationsfilelink', upload_to='modelspecifications')),
                ('modellink', models.TextField(blank=True, db_column='modellink')),
            ],
            options={
                'db_table': 'equipmentmodels',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EquipmentUsed',
            fields=[
                ('bridgeid', models.AutoField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'equipmentused',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ExtensionProperties',
            fields=[
                ('propertyid', models.IntegerField(db_column='propertyid', primary_key=True, serialize=False)),
                ('propertyname', models.TextField(db_column='propertyname')),
                ('propertydescription', models.TextField(blank=True, db_column='propertydescription')),
            ],
            options={
                'db_table': 'extensionproperties',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ExternalIdentifierSystem',
            fields=[
                ('externalidentifiersystemid', models.IntegerField(db_column='externalidentifiersystemid', primary_key=True, serialize=False)),
                ('externalidentifiersystemname', models.TextField(db_column='externalidentifiersystemname')),
                ('externalidentifiersystemdescription', models.TextField(blank=True, db_column='externalidentifiersystemdescription')),
                ('externalidentifiersystemurl', models.TextField(blank=True, db_column='externalidentifiersystemurl')),
            ],
            options={
                'db_table': 'externalidentifiersystems',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='FeatureAction',
            fields=[
                ('featureactionid', models.AutoField(db_column='featureactionid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'featureactions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='InstrumentOutputVariable',
            fields=[
                ('instrumentoutputvariableid', models.AutoField(db_column='instrumentoutputvariableid', primary_key=True, serialize=False)),
                ('instrumentresolution', models.TextField(blank=True, db_column='instrumentresolution')),
                ('instrumentaccuracy', models.TextField(blank=True, db_column='instrumentaccuracy')),
            ],
            options={
                'db_table': 'instrumentoutputvariables',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurementResultValue',
            fields=[
                ('valueid', models.BigIntegerField(db_column='valueid', primary_key=True, serialize=False)),
                ('datavalue', models.FloatField(db_column='datavalue')),
                ('valuedatetime', models.DateTimeField(db_column='valuedatetime')),
                ('valuedatetimeutcoffset', models.IntegerField(db_column='valuedatetimeutcoffset')),
            ],
            options={
                'db_table': 'measurementresultvalues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurementResultValueAnnotation',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'measurementresultvalueannotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Method',
            fields=[
                ('methodid', models.AutoField(db_column='methodid', primary_key=True, serialize=False)),
                ('methodcode', models.TextField(db_column='methodcode')),
                ('methodname', models.TextField(db_column='methodname')),
                ('methoddescription', models.TextField(blank=True, db_column='methoddescription')),
                ('methodlink', models.TextField(blank=True, db_column='methodlink')),
            ],
            options={
                'db_table': 'methods',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MethodAnnotation',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'methodannotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MethodCitation',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'methodcitations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MethodExtensionPropertyValue',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('propertyvalue', models.TextField(db_column='propertyvalue')),
            ],
            options={
                'db_table': 'methodextensionpropertyvalues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MethodExternalIdentifier',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('methodexternalidentifier', models.TextField(db_column='methodexternalidentifier')),
                ('methodexternalidentifieruri', models.TextField(blank=True, db_column='methodexternalidentifieruri')),
            ],
            options={
                'db_table': 'methodexternalidentifiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ModelAffiliation',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('isprimary', models.BooleanField(db_column='isprimary', default=None)),
                ('roledescription', models.TextField(blank=True, db_column='roledescription')),
            ],
            options={
                'db_table': 'modelaffiliations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Models',
            fields=[
                ('modelid', models.IntegerField(db_column='modelid', primary_key=True, serialize=False)),
                ('modelcode', models.CharField(db_column='modelcode', max_length=255)),
                ('modelname', models.CharField(db_column='modelname', max_length=255)),
                ('modeldescription', models.CharField(blank=True, db_column='modeldescription', max_length=500)),
                ('version', models.TextField(blank=True, db_column='version')),
                ('modellink', models.TextField(blank=True, db_column='modellink')),
            ],
            options={
                'db_table': 'models',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('organizationid', models.AutoField(db_column='organizationid', primary_key=True, serialize=False)),
                ('organizationcode', models.TextField(db_column='organizationcode')),
                ('organizationname', models.TextField(db_column='organizationname')),
                ('organizationdescription', models.TextField(blank=True, db_column='organizationdescription')),
                ('organizationlink', models.TextField(blank=True, db_column='organizationlink')),
            ],
            options={
                'db_table': 'organizations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='People',
            fields=[
                ('personid', models.AutoField(db_column='personid', primary_key=True, serialize=False)),
                ('personfirstname', models.TextField(db_column='personfirstname')),
                ('personmiddlename', models.TextField(blank=True, db_column='personmiddlename')),
                ('personlastname', models.TextField(db_column='personlastname')),
            ],
            options={
                'db_table': 'people',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PersonExternalIdentifier',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('personexternalidentifier', models.TextField(db_column='personexternalidentifier')),
                ('personexternalidenifieruri', models.TextField(blank=True, db_column='personexternalidenifieruri')),
            ],
            options={
                'db_table': 'personexternalidentifiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PointCoverageResultValue',
            fields=[
                ('valueid', models.BigIntegerField(db_column='valueid', primary_key=True, serialize=False)),
                ('datavalue', models.BigIntegerField(db_column='datavalue')),
                ('valuedatetime', models.DateTimeField(db_column='valuedatetime')),
                ('valuedatetimeutcoffset', models.IntegerField(db_column='valuedatetimeutcoffset')),
                ('xlocation', models.FloatField(db_column='xlocation')),
                ('ylocation', models.FloatField(db_column='ylocation')),
            ],
            options={
                'db_table': 'pointcoverageresultvalues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PointCoverageResultValueAnnotation',
            fields=[
                ('bridgeid', models.BigIntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'pointcoverageresultvalueannotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProcessingLevel',
            fields=[
                ('processinglevelid', models.IntegerField(db_column='processinglevelid', primary_key=True, serialize=False)),
                ('processinglevelcode', models.TextField(db_column='processinglevelcode')),
                ('definition', models.TextField(blank=True, db_column='definition')),
                ('explanation', models.TextField(blank=True, db_column='explanation')),
            ],
            options={
                'db_table': 'processinglevels',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProfileResultValue',
            fields=[
                ('valueid', models.BigIntegerField(db_column='valueid', primary_key=True, serialize=False)),
                ('datavalue', models.FloatField(db_column='datavalue')),
                ('valuedatetime', models.DateTimeField(db_column='valuedatetime')),
                ('valuedatetimeutcoffset', models.IntegerField(db_column='valuedatetimeutcoffset')),
                ('zlocation', models.FloatField(db_column='zlocation')),
                ('zaggregationinterval', models.FloatField(db_column='zaggregationinterval')),
                ('timeaggregationinterval', models.FloatField(db_column='timeaggregationinterval')),
            ],
            options={
                'db_table': 'profileresultvalues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProfileResultValueAnnotation',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'profileresultvalueannotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ReferenceMaterial',
            fields=[
                ('referencematerialid', models.IntegerField(db_column='referencematerialid', primary_key=True, serialize=False)),
                ('referencematerialcode', models.TextField(db_column='referencematerialcode')),
                ('referencemateriallotcode', models.TextField(blank=True, db_column='referencemateriallotcode')),
                ('referencematerialpurchasedate', models.DateTimeField(blank=True, db_column='referencematerialpurchasedate', null=True)),
                ('referencematerialexpirationdate', models.DateTimeField(blank=True, db_column='referencematerialexpirationdate', null=True)),
                ('referencematerialcertificatelink', models.FileField(blank=True, db_column='referencematerialcertificatelink', upload_to=b'')),
            ],
            options={
                'db_table': 'referencematerials',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ReferenceMaterialExternalIdentifier',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('referencematerialexternalidentifier', models.TextField(db_column='referencematerialexternalidentifier')),
                ('referencematerialexternalidentifieruri', models.TextField(blank=True, db_column='referencematerialexternalidentifieruri')),
            ],
            options={
                'db_table': 'referencematerialexternalidentifiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ReferenceMaterialValue',
            fields=[
                ('referencematerialvalueid', models.IntegerField(db_column='referencematerialvalueid', primary_key=True, serialize=False)),
                ('referencematerialvalue', models.FloatField(db_column='referencematerialvalue')),
                ('referencematerialaccuracy', models.FloatField(blank=True, db_column='referencematerialaccuracy', null=True)),
            ],
            options={
                'db_table': 'referencematerialvalues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RelatedAction',
            fields=[
                ('relationid', models.AutoField(db_column='relationid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'relatedactions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RelatedAnnotation',
            fields=[
                ('relationid', models.IntegerField(db_column='relationid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'relatedannotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RelatedCitation',
            fields=[
                ('relationid', models.IntegerField(db_column='relationid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'relatedcitations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RelatedDataset',
            fields=[
                ('relationid', models.IntegerField(db_column='relationid', primary_key=True, serialize=False)),
                ('versioncode', models.TextField(blank=True, db_column='versioncode')),
            ],
            options={
                'db_table': 'relateddatasets',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RelatedEquipment',
            fields=[
                ('relationid', models.AutoField(db_column='relationid', primary_key=True, serialize=False)),
                ('relationshipstartdatetime', models.DateTimeField(db_column='relationshipstartdatetime')),
                ('relationshipstartdatetimeutcoffset', models.IntegerField(db_column='relationshipstartdatetimeutcoffset')),
                ('relationshipenddatetime', models.DateTimeField(blank=True, db_column='relationshipenddatetime', null=True)),
                ('relationshipenddatetimeutcoffset', models.IntegerField(blank=True, db_column='relationshipenddatetimeutcoffset', null=True)),
            ],
            options={
                'db_table': 'relatedequipment',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RelatedFeatures',
            fields=[
                ('relationid', models.IntegerField(db_column='relationid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'relatedfeatures',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RelatedModel',
            fields=[
                ('relatedid', models.IntegerField(db_column='relatedid', primary_key=True, serialize=False)),
                ('relatedmodelid', models.BigIntegerField(db_column='relatedmodelid')),
            ],
            options={
                'db_table': 'relatedmodels',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RelatedResult',
            fields=[
                ('relationid', models.IntegerField(db_column='relationid', primary_key=True, serialize=False)),
                ('versioncode', models.TextField(blank=True, db_column='versioncode')),
                ('relatedresultsequencenumber', models.IntegerField(blank=True, db_column='relatedresultsequencenumber', null=True)),
            ],
            options={
                'db_table': 'relatedresults',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('resultid', models.AutoField(db_column='resultid', primary_key=True, serialize=False)),
                ('resultuuid', models.TextField(db_column='resultuuid', default=uuid.uuid4)),
                ('resultdatetime', models.DateTimeField(blank=True, db_column='resultdatetime', null=True)),
                ('resultdatetimeutcoffset', models.BigIntegerField(blank=True, db_column='resultdatetimeutcoffset', null=True)),
                ('validdatetime', models.DateTimeField(blank=True, db_column='validdatetime', null=True)),
                ('validdatetimeutcoffset', models.BigIntegerField(blank=True, db_column='validdatetimeutcoffset', null=True)),
                ('valuecount', models.IntegerField(db_column='valuecount')),
            ],
            options={
                'db_table': 'results',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ResultAnnotation',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('begindatetime', models.DateTimeField(db_column='begindatetime')),
                ('enddatetime', models.DateTimeField(db_column='enddatetime')),
            ],
            options={
                'db_table': 'resultannotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ResultExtensionPropertyValue',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('propertyvalue', models.TextField(db_column='propertyvalue')),
            ],
            options={
                'db_table': 'resultextensionpropertyvalues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ResultsDataQuality',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'resultsdataquality',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SamplingFeature',
            fields=[
                ('samplingfeatureid', models.AutoField(db_column='samplingfeatureid', primary_key=True, serialize=False)),
                ('samplingfeaturecode', models.TextField(db_column='samplingfeaturecode')),
                ('samplingfeaturename', models.TextField(blank=True, db_column='samplingfeaturename')),
                ('samplingfeaturedescription', models.TextField(blank=True, db_column='samplingfeaturedescription')),
                ('elevation_m', models.FloatField(blank=True, db_column='elevation_m', null=True)),
            ],
            options={
                'db_table': 'samplingfeatures',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SamplingFeatureAnnotation',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'samplingfeatureannotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SamplingFeatureExternalIdentifier',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('samplingfeatureexternalidentifier', models.TextField(db_column='samplingfeatureexternalidentifier')),
                ('samplingfeatureexternalidentiferuri', models.TextField(blank=True, db_column='samplingfeatureexternalidentiferuri')),
            ],
            options={
                'db_table': 'samplingfeatureexternalidentifiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SamplingFeatureExtPropertyVal',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('propertyvalue', models.TextField(db_column='propertyvalue')),
            ],
            options={
                'db_table': 'samplingfeatureextensionpropertyvalues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SectionResultValue',
            fields=[
                ('valueid', models.BigIntegerField(db_column='valueid', primary_key=True, serialize=False)),
                ('datavalue', models.FloatField(db_column='datavalue')),
                ('valuedatetime', models.BigIntegerField(db_column='valuedatetime')),
                ('valuedatetimeutcoffset', models.BigIntegerField(db_column='valuedatetimeutcoffset')),
                ('xlocation', models.FloatField(db_column='xlocation')),
                ('xaggregationinterval', models.FloatField(db_column='xaggregationinterval')),
                ('zlocation', models.BigIntegerField(db_column='zlocation')),
                ('zaggregationinterval', models.FloatField(db_column='zaggregationinterval')),
                ('timeaggregationinterval', models.FloatField(db_column='timeaggregationinterval')),
            ],
            options={
                'db_table': 'sectionresultvalues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SectionResultValueAnnotation',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'sectionresultvalueannotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Simulation',
            fields=[
                ('simulationid', models.IntegerField(db_column='simulationid', primary_key=True, serialize=False)),
                ('actionid', models.BigIntegerField(db_column='actionid')),
                ('simulationname', models.CharField(db_column='simulationname', max_length=255)),
                ('simulationdescription', models.CharField(blank=True, db_column='simulationdescription', max_length=500)),
                ('simulationstartdatetime', models.DateTimeField(db_column='simulationstartdatetime')),
                ('simulationstartdatetimeutcoffset', models.IntegerField(db_column='simulationstartdatetimeutcoffset')),
                ('simulationenddatetime', models.DateTimeField(db_column='simulationenddatetime')),
                ('simulationenddatetimeutcoffset', models.IntegerField(db_column='simulationenddatetimeutcoffset')),
                ('timestepvalue', models.FloatField(db_column='timestepvalue')),
                ('timestepunitsid', models.BigIntegerField(db_column='timestepunitsid')),
                ('inputdatasetid', models.BigIntegerField(blank=True, db_column='inputdatasetid', null=True)),
            ],
            options={
                'db_table': 'simulations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SpatialOffsets',
            fields=[
                ('spatialoffsetid', models.IntegerField(db_column='spatialoffsetid', primary_key=True, serialize=False)),
                ('offset1value', models.FloatField(db_column='offset1value')),
                ('offset1unitid', models.IntegerField(db_column='offset1unitid')),
                ('offset2value', models.FloatField(blank=True, db_column='offset2value', null=True)),
                ('offset2unitid', models.IntegerField(blank=True, db_column='offset2unitid', null=True)),
                ('offset3value', models.FloatField(blank=True, db_column='offset3value', null=True)),
                ('offset3unitid', models.IntegerField(blank=True, db_column='offset3unitid', null=True)),
            ],
            options={
                'db_table': 'spatialoffsets',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SpatialReference',
            fields=[
                ('spatialreferenceid', models.IntegerField(db_column='spatialreferenceid', primary_key=True, serialize=False)),
                ('srscode', models.TextField(blank=True, db_column='srscode')),
                ('srsname', models.TextField(db_column='srsname')),
                ('srsdescription', models.TextField(blank=True, db_column='srsdescription')),
            ],
            options={
                'db_table': 'spatialreferences',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SpatialReferenceExternalIdentifier',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('spatialreferenceexternalidentifier', models.TextField(db_column='spatialreferenceexternalidentifier')),
                ('spatialreferenceexternalidentifieruri', models.TextField(blank=True, db_column='spatialreferenceexternalidentifieruri')),
            ],
            options={
                'db_table': 'spatialreferenceexternalidentifiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SpecimenTaxonomicClassifier',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('citationid', models.IntegerField(blank=True, db_column='citationid', null=True)),
            ],
            options={
                'db_table': 'specimentaxonomicclassifiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SpectraResultValue',
            fields=[
                ('valueid', models.BigIntegerField(db_column='valueid', primary_key=True, serialize=False)),
                ('datavalue', models.FloatField(db_column='datavalue')),
                ('valuedatetime', models.DateTimeField(db_column='valuedatetime')),
                ('valuedatetimeutcoffset', models.IntegerField(db_column='valuedatetimeutcoffset')),
                ('excitationwavelength', models.FloatField(db_column='excitationwavelength')),
                ('emissionwavelength', models.FloatField(db_column='emissionwavelength')),
                ('timeaggregationinterval', models.FloatField(db_column='timeaggregationinterval')),
            ],
            options={
                'db_table': 'spectraresultvalues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SpectraResultValueAnnotation',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'spectraresultvalueannotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Sysdiagrams',
            fields=[
                ('name', models.CharField(max_length=128)),
                ('principal_id', models.IntegerField()),
                ('diagram_id', models.AutoField(primary_key=True, serialize=False)),
                ('version', models.IntegerField(blank=True, null=True)),
                ('definition', models.BinaryField(blank=True, null=True)),
            ],
            options={
                'db_table': 'sysdiagrams',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TaxonomicClassifier',
            fields=[
                ('taxonomicclassifierid', models.IntegerField(db_column='taxonomicclassifierid', primary_key=True, serialize=False)),
                ('taxonomicclassifiername', models.TextField(db_column='taxonomicclassifiername')),
                ('taxonomicclassifiercommonname', models.TextField(blank=True, db_column='taxonomicclassifiercommonname')),
                ('taxonomicclassifierdescription', models.TextField(blank=True, db_column='taxonomicclassifierdescription')),
            ],
            options={
                'db_table': 'taxonomicclassifiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TaxonomicClassifierExtId',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('taxonomicclassifierexternalidentifier', models.TextField(db_column='taxonomicclassifierexternalidentifier')),
                ('taxonomicclassifierexternalidentifieruri', models.TextField(blank=True, db_column='taxonomicclassifierexternalidentifieruri')),
            ],
            options={
                'db_table': 'taxonomicclassifierexternalidentifiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TimeSeriesResultValue',
            fields=[
                ('valueid', models.BigIntegerField(db_column='valueid', primary_key=True, serialize=False)),
                ('datavalue', models.FloatField(db_column='datavalue')),
                ('valuedatetime', models.DateTimeField(db_column='valuedatetime')),
                ('valuedatetimeutcoffset', models.IntegerField(db_column='valuedatetimeutcoffset')),
                ('timeaggregationinterval', models.FloatField(db_column='timeaggregationinterval')),
            ],
            options={
                'db_table': 'timeseriesresultvalues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TimeSeriesResultValueAnnotation',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'timeseriesresultvalueannotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TrajectoryResultValue',
            fields=[
                ('valueid', models.BigIntegerField(db_column='valueid', primary_key=True, serialize=False)),
                ('datavalue', models.FloatField(db_column='datavalue')),
                ('valuedatetime', models.DateTimeField(db_column='valuedatetime')),
                ('valuedatetimeutcoffset', models.IntegerField(db_column='valuedatetimeutcoffset')),
                ('xlocation', models.FloatField(db_column='xlocation')),
                ('ylocation', models.FloatField(db_column='ylocation')),
                ('zlocation', models.FloatField(db_column='zlocation')),
                ('trajectorydistance', models.FloatField(db_column='trajectorydistance')),
                ('trajectorydistanceaggregationinterval', models.FloatField(db_column='trajectorydistanceaggregationinterval')),
                ('trajectorydistanceunitsid', models.IntegerField(db_column='trajectorydistanceunitsid')),
                ('censorcode', models.TextField(db_column='censorcode')),
                ('timeaggregationinterval', models.FloatField(db_column='timeaggregationinterval')),
            ],
            options={
                'db_table': 'trajectoryresultvalues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TrajectoryResultValueAnnotation',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'trajectoryresultvalueannotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TransectResultValue',
            fields=[
                ('valueid', models.BigIntegerField(db_column='valueid', primary_key=True, serialize=False)),
                ('datavalue', models.FloatField(db_column='datavalue')),
                ('valuedatetime', models.DateTimeField(db_column='valuedatetime')),
                ('valuedatetimeutcoffset', models.DateTimeField(db_column='valuedatetimeutcoffset')),
                ('xlocation', models.FloatField(db_column='xlocation')),
                ('xlocationunitsid', models.IntegerField(db_column='xlocationunitsid')),
                ('ylocation', models.FloatField(db_column='ylocation')),
                ('ylocationunitsid', models.IntegerField(db_column='ylocationunitsid')),
                ('transectdistance', models.FloatField(db_column='transectdistance')),
                ('transectdistanceaggregationinterval', models.FloatField(db_column='transectdistanceaggregationinterval')),
                ('transectdistanceunitsid', models.IntegerField(db_column='transectdistanceunitsid')),
                ('timeaggregationinterval', models.FloatField(db_column='timeaggregationinterval')),
                ('timeaggregationintervalunitsid', models.IntegerField(db_column='timeaggregationintervalunitsid')),
            ],
            options={
                'db_table': 'transectresultvalues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TransectResultValueAnnotation',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'transectresultvalueannotations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Units',
            fields=[
                ('unitsid', models.IntegerField(db_column='unitsid', primary_key=True, serialize=False)),
                ('unitsabbreviation', models.TextField(db_column='unitsabbreviation')),
                ('unitsname', models.TextField(db_column='unitsname')),
            ],
            options={
                'db_table': 'units',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Variable',
            fields=[
                ('variableid', models.IntegerField(db_column='variableid', primary_key=True, serialize=False)),
                ('variablecode', models.TextField(db_column='variablecode')),
                ('variabledefinition', models.TextField(blank=True, db_column='variabledefinition')),
                ('nodatavalue', models.FloatField(db_column='nodatavalue')),
            ],
            options={
                'db_table': 'variables',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VariableExtensionPropertyValue',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('propertyvalue', models.TextField(db_column='propertyvalue')),
            ],
            options={
                'db_table': 'variableextensionpropertyvalues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VariableExternalIdentifier',
            fields=[
                ('bridgeid', models.IntegerField(db_column='bridgeid', primary_key=True, serialize=False)),
                ('variableexternalidentifer', models.TextField(db_column='variableexternalidentifer')),
                ('variableexternalidentifieruri', models.TextField(blank=True, db_column='variableexternalidentifieruri')),
            ],
            options={
                'db_table': 'variableexternalidentifiers',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CalibrationAction',
            fields=[
                ('actionid', models.OneToOneField(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='calibrationaction', serialize=False, to='sensordatainterface.Action')),
                ('calibrationcheckvalue', models.FloatField(blank=True, db_column='calibrationcheckvalue', null=True)),
                ('calibrationequation', models.TextField(blank=True, db_column='calibrationequation')),
            ],
            options={
                'db_table': 'calibrationactions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CategoricalResult',
            fields=[
                ('resultid', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='sensordatainterface.Result')),
                ('xlocation', models.FloatField(blank=True, db_column='xlocation', null=True)),
                ('xlocationunitsid', models.IntegerField(blank=True, db_column='xlocationunitsid', null=True)),
                ('ylocation', models.FloatField(blank=True, db_column='ylocation', null=True)),
                ('ylocationunitsid', models.IntegerField(blank=True, db_column='ylocationunitsid', null=True)),
                ('zlocation', models.FloatField(blank=True, db_column='zlocation', null=True)),
                ('zlocationunitsid', models.IntegerField(blank=True, db_column='zlocationunitsid', null=True)),
            ],
            options={
                'db_table': 'categoricalresults',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MaintenanceAction',
            fields=[
                ('actionid', models.OneToOneField(db_column='actionid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='maintenanceaction', serialize=False, to='sensordatainterface.Action')),
                ('isfactoryservice', models.BooleanField(db_column='isfactoryservice', default=None)),
                ('maintenancecode', models.TextField(blank=True, db_column='maintenancecode')),
                ('maintenancereason', models.TextField(blank=True, db_column='maintenancereason')),
            ],
            options={
                'db_table': 'maintenanceactions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='PointCoverageResult',
            fields=[
                ('resultid', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='sensordatainterface.Result')),
                ('zlocation', models.FloatField(blank=True, db_column='zlocation', null=True)),
                ('intendedxspacing', models.FloatField(blank=True, db_column='intendedxspacing', null=True)),
                ('intendedyspacing', models.FloatField(blank=True, db_column='intendedyspacing', null=True)),
                ('timeaggregationinterval', models.FloatField(db_column='timeaggregationinterval')),
                ('timeaggregationintervalunitsid', models.IntegerField(db_column='timeaggregationintervalunitsid')),
            ],
            options={
                'db_table': 'pointcoverageresults',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ProfileResult',
            fields=[
                ('resultid', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='sensordatainterface.Result')),
                ('xlocation', models.FloatField(blank=True, db_column='xlocation', null=True)),
                ('ylocation', models.FloatField(blank=True, db_column='ylocation', null=True)),
                ('intendedzspacing', models.FloatField(blank=True, db_column='intendedzspacing', null=True)),
                ('intendedtimespacing', models.FloatField(blank=True, db_column='intendedtimespacing', null=True)),
            ],
            options={
                'db_table': 'profileresults',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ResultDerivationEquation',
            fields=[
                ('resultid', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='sensordatainterface.Result')),
            ],
            options={
                'db_table': 'resultderivationequations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ResultNormalizationValue',
            fields=[
                ('resultid', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='sensordatainterface.Result')),
            ],
            options={
                'db_table': 'resultnormalizationvalues',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SectionResult',
            fields=[
                ('resultid', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='sensordatainterface.Result')),
                ('ylocation', models.FloatField(blank=True, db_column='ylocation', null=True)),
                ('intendedxspacing', models.FloatField(blank=True, db_column='intendedxspacing', null=True)),
                ('intendedzspacing', models.FloatField(blank=True, db_column='intendedzspacing', null=True)),
                ('intendedtimespacing', models.FloatField(blank=True, db_column='intendedtimespacing', null=True)),
            ],
            options={
                'db_table': 'sectionresults',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Sites',
            fields=[
                ('samplingfeatureid', models.OneToOneField(db_column='samplingfeatureid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='sites', serialize=False, to='sensordatainterface.SamplingFeature')),
                ('latitude', models.FloatField(db_column='latitude')),
                ('longitude', models.FloatField(db_column='longitude')),
            ],
            options={
                'db_table': 'sites',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SpecimenBatchPostion',
            fields=[
                ('featureactionid', models.OneToOneField(db_column='featureactionid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='sensordatainterface.FeatureAction')),
                ('batchpositionnumber', models.IntegerField(db_column='batchpositionnumber')),
                ('batchpositionlabel', models.TextField(blank=True, db_column='batchpositionlabel')),
            ],
            options={
                'db_table': 'specimenbatchpostions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Specimens',
            fields=[
                ('samplingfeatureid', models.OneToOneField(db_column='samplingfeatureid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='sensordatainterface.SamplingFeature')),
                ('isfieldspecimen', models.BooleanField(db_column='isfieldspecimen', default=None)),
            ],
            options={
                'db_table': 'specimens',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SpectraResult',
            fields=[
                ('resultid', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='sensordatainterface.Result')),
                ('xlocation', models.FloatField(blank=True, db_column='xlocation', null=True)),
                ('ylocation', models.FloatField(blank=True, db_column='ylocation', null=True)),
                ('zlocation', models.FloatField(blank=True, db_column='zlocation', null=True)),
                ('intendedwavelengthspacing', models.FloatField(blank=True, db_column='intendedwavelengthspacing', null=True)),
            ],
            options={
                'db_table': 'spectraresults',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TimeSeriesResult',
            fields=[
                ('resultid', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='sensordatainterface.Result')),
                ('xlocation', models.FloatField(blank=True, db_column='xlocation', null=True)),
                ('ylocation', models.FloatField(blank=True, db_column='ylocation', null=True)),
                ('zlocation', models.FloatField(blank=True, db_column='zlocation', null=True)),
                ('intendedtimespacing', models.FloatField(blank=True, db_column='intendedtimespacing', null=True)),
            ],
            options={
                'db_table': 'timeseriesresults',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TrajectoryResult',
            fields=[
                ('resultid', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='sensordatainterface.Result')),
                ('intendedtrajectoryspacing', models.FloatField(blank=True, db_column='intendedtrajectoryspacing', null=True)),
                ('intendedtimespacing', models.FloatField(blank=True, db_column='intendedtimespacing', null=True)),
            ],
            options={
                'db_table': 'trajectoryresults',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TransectResult',
            fields=[
                ('resultid', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='sensordatainterface.Result')),
                ('zlocation', models.FloatField(blank=True, db_column='zlocation', null=True)),
                ('intendedtransectspacing', models.FloatField(blank=True, db_column='intendedtransectspacing', null=True)),
                ('intendedtimespacing', models.FloatField(blank=True, db_column='intendedtimespacing', null=True)),
            ],
            options={
                'db_table': 'transectresults',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='MeasurementResult',
            fields=[
                ('resultid', models.OneToOneField(db_column='resultid', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='sensordatainterface.Result')),
                ('xlocation', models.FloatField(blank=True, db_column='xlocation', null=True)),
                ('ylocation', models.FloatField(blank=True, db_column='ylocation', null=True)),
                ('zlocation', models.FloatField(blank=True, db_column='zlocation', null=True)),
                ('xlocationunitsid', models.ForeignKey(blank=True, db_column='xlocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='measurement_xlocationunitsid', to='sensordatainterface.Units')),
                ('ylocationunitsid', models.ForeignKey(blank=True, db_column='ylocationunitsid', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='measurement_ylocationunitsid', to='sensordatainterface.Units')),
            ],
        ),
    ]
